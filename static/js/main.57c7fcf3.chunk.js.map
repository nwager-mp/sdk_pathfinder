{"version":3,"sources":["mp/GetSDK.ts","app/Frame.tsx","app/reusables/accordion/Accordion.tsx","app/reusables/accordion/AccordionItem.tsx","app/reusables/accordion/AccordionGroup.tsx","app/utils.ts","app/Menu.tsx","app/Pathfinder.ts","app/sdk-components/PathRenderer.ts","app/sdk-components/CameraController.ts","app/sdk-components/index.ts","app/App.tsx","index.tsx"],"names":["GetSDK","elementId","applicationKey","Promise","resolve","reject","intervalId","setInterval","a","iframe","HTMLIFrameElement","document","getElementById","contentWindow","sdkWindow","MP_SDK","clearInterval","sdk","connect","Frame","className","id","this","props","src","title","allowFullScreen","frameBorder","Component","Accordion","header","children","ACCORDION_ITEM_HEIGHT","AccordionItem","body","onClick","style","height","AccordionGroup","state","expanded","showChildren","setState","setTimeout","numChildren","Array","isArray","length","hasChildren","contentHeight","classNames","distance","p1","p2","Math","sqrt","x","y","z","sweepIdToPoint","sweepData","position","Menu","sweeps","options","prevProps","map","s","sid","getOptions","then","currSweepId","optionsList","Object","keys","dist","dest","push","o","onChange","round","undefined","items","elt","renderItem","renderGroups","Pathfinder","VERT_THRESHOLD","HORZ_THRESHOLD","graph","path","sweepPositions","sweep","createGraph","i","sweep_a","adj","neighbor_sids","neighbors","j","sweep_b_sid","d","i_sid","j_sid","a_sid","b_sid","console","log","error","ht","visited","cost","parent","debug_n","min_sid","encountered_sids","penalty","heuristic","reverse","PathRenderer","material","inputs","visible","radius","color","opacity","heightOffset","stepMultiplier","context","outputs","curve","onInit","THREE","three","every","p","points","Vector3","spline","CatmullRomCurve3","extrudeSettings","steps","bevelEnabled","extrudePath","arcShape","Shape","absarc","PI","extrudeGeometry","ExtrudeGeometry","MeshBasicMaterial","transparent","pathMesh","Mesh","objectRoot","onEvent","_type","_data","onInputsUpdated","_previous","onTick","_tickDelta","onDestroy","dispose","pathRendererType","PathRendererFactory","CameraController","startTime","up","speed","verticalOffset","camera","PerspectiveCamera","copy","getPoint","updateProjectionMatrix","Date","now","getLength","time","tNow","tFuture","currPos","getPointAt","futurePos","matrix","Matrix4","lookAt","quaternion","Quaternion","setFromRotationMatrix","cameraControllerType","CameraControllerFactory","initComponents","all","Scene","register","defaultUrlParams","m","qs","hr","brand","help","play","App","pathNode","pathfinder","flyNode","onOptionSelect","selectedSweepId","queryString","handleUrlParams","process","params","URLSearchParams","window","location","search","entries","k","v","has","append","toString","Model","getData","Sweep","data","subscribe","onCollectionUpdated","collection","sweepMap","current","currentSweep","handlePath","findShortestPath","stop","createNode","addComponent","start","endFly","camCon","cam","enabled","bind","Mode","moveTo","DOLLHOUSE","transition","TransitionType","INSTANT","startFly","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.57c7fcf3.chunk.js","sourcesContent":["import { MpSdk, ShowcaseEmbedWindow } from './sdk';\n\nconst SDK_VERSION = '3.2';\n\n/**\n * Gets a reference to the SDK. Use this if you want to do SDK stuff.\n * @param {string | HTMLIFrameElement} elementId ID of the iframe or the iframe element itself\n * @param {string} applicationKey Your API key \n * @returns Promise of MpSdk reference\n */\nexport const GetSDK = function(elementId: string | HTMLIFrameElement, applicationKey: string): Promise<MpSdk> {\n  return new Promise(function(resolve, reject) {\n    const checkIframe = async function() {\n      let iframe = null;\n      if (elementId instanceof HTMLIFrameElement) {\n        iframe = elementId as HTMLIFrameElement;\n      }\n      else {\n        iframe = document.getElementById(elementId) as HTMLIFrameElement;\n      }\n\n      if (iframe) {\n        // sometimes this is undefined for some reason, so check for it\n        const sdkWindow = (await iframe.contentWindow as ShowcaseEmbedWindow).MP_SDK;\n        if (sdkWindow) {\n          clearInterval(intervalId);\n          const sdk = sdkWindow.connect(iframe, applicationKey, SDK_VERSION);\n          resolve(sdk);\n        }\n      }\n    };\n    const intervalId = setInterval(checkIframe, 100);\n  });\n}\n","import React, { Component } from 'react';\nimport './Frame.scss';\n\ninterface Props {\n  src: string;\n  id?: string;\n}\n\n/**\n * This component houses the actual Matterport IFrame element. Doesn't do anything else.\n */\nexport default class Frame extends Component<Props, {}> {\n  render() {\n    return (\n      <div className='frame'>\n        <iframe\n          id={this.props.id || 'showcase'}\n          className='frame'\n          src={this.props.src}\n          title={'showcase'}\n          allowFullScreen={true}\n          frameBorder='0'\n        >\n        </iframe>\n      </div>\n    );\n  }\n}\n","import { Component } from 'react';\nimport './Accordion.scss';\n\ninterface AccordionProps {\n  header?: string\n}\n\nexport default class Accordion extends Component<AccordionProps> {\n\n  public render() {\n    const { header, children } = this.props;\n\n    return (\n      <div className='accordion'>\n        { header &&\n          <div className='accordion-header'>{header}</div>\n        }\n        {children}\n      </div>\n    );\n  }\n}","import { Component } from 'react';\nimport './AccordionItem.scss';\n\ninterface AccordionItemProps {\n  header?: string;\n  body?: string;\n  onClick?: (e: any) => void;\n}\n\nexport const ACCORDION_ITEM_HEIGHT = '40px';\n\nexport default class AccordionItem extends Component<AccordionItemProps> {\n  public render() {\n    const { header, body, onClick } = this.props;\n    return (\n      <div className='accordion-item' onClick={onClick} style={{ height: ACCORDION_ITEM_HEIGHT }}>\n        <div className='accordion-item-details'>\n          <div className='accordion-item-header'>{header}</div>\n          <div className='accordion-item-body'>{body}</div>\n        </div>\n      </div>\n    );\n  }\n}","import { Component } from 'react';\nimport classNames from 'classnames';\nimport './AccordionGroup.scss';\nimport { ACCORDION_ITEM_HEIGHT } from './AccordionItem';\n\ninterface AccordionGroupProps {\n  header?: string;\n  expanded?: boolean;\n}\n\ninterface AccordionGroupState {\n  expanded: boolean;\n  showChildren: boolean;\n}\n\nexport default class AccordionGroup extends Component<AccordionGroupProps, AccordionGroupState> {\n  constructor(props: any) {\n    super(props);\n    const { expanded } = this.props;\n    this.state = {\n      expanded: !!expanded,\n      showChildren: !!expanded,\n    };\n  }\n\n  private onClick = () => {\n    const { expanded, showChildren } = this.state;\n    this.setState({\n      expanded: !expanded,\n    }, () => setTimeout(() => this.setState({showChildren: !showChildren}), showChildren ? 250 : 0));\n  }\n  \n  public render() {\n    const { children, header } = this.props;\n    const { expanded } = this.state;\n\n    let numChildren = 0;\n    if (children) {\n      if (Array.isArray(children)) {\n        numChildren = children.length;\n      } else {\n        numChildren =  1; // one child fails isArray check\n      }\n    }\n    const hasChildren = numChildren > 0;\n    const contentHeight = expanded && hasChildren ? `calc(${numChildren}*${ACCORDION_ITEM_HEIGHT})` : '0';\n\n    return (\n      <div className='accordion-group-container'>\n        <div\n          className='accordion-group-header'\n          onClick={this.onClick}\n        >\n          {'' + header + (hasChildren ? ` (${numChildren})` : '')}\n        </div>\n        <div\n          className={classNames('accordion-group', {\n            'expanded': expanded,\n          })}\n          style={{ height: contentHeight }}\n        >\n          {numChildren > 0 && children}\n        </div>\n      </div>\n    );\n  }\n}","import { Dictionary, MpSdk, Vector3 } from \"../mp/sdk\";\n\n/**\n * This module is for general helper interfaces, types, and methods.\n */\n\n/**\n * Euclidean distance between two points.\n * @param {Vector3} p1 \n * @param {Vector3} p2 \n * @returns {number}\n */\nexport function distance(p1: Vector3, p2: Vector3): number {\n  return Math.sqrt((p1.x - p2.x)**2 + (p1.y - p2.y)**2 + (p1.z - p2.z)**2);\n}\n\nexport function sweepIdToPoint(id: string, sweepData: Dictionary<MpSdk.Sweep.ObservableSweepData>): Vector3 {\n  return sweepData[id].position;\n}\n\nexport {};","import { Component } from 'react';\nimport { Dictionary, Sweep } from '../mp/sdk';\nimport './Menu.scss';\nimport Accordion from './reusables/accordion/Accordion';\nimport AccordionGroup from './reusables/accordion/AccordionGroup';\nimport AccordionItem from './reusables/accordion/AccordionItem';\nimport { distance } from './utils';\n\ninterface MenuProps {\n  currSweepId?: string;\n  selectedSweepId?: string;\n  sweepData: Sweep.SweepData[];\n  onChange: (e: any) => void;\n}\n\ninterface MenuState {\n  options: OptionsObject[];\n}\n\ninterface OptionsObject {\n  id: string;\n  distance?: number;\n}\n\n/**\n * Component for UI elements like sweep selector, location info, etc.\n */\nexport default class Menu extends Component<MenuProps, MenuState> {\n\n  private sweeps: Dictionary<Sweep.SweepData> = {}; // more convenient form of sweep data\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      options: [],\n    };\n  }\n\n  public componentDidUpdate(prevProps: MenuProps) {\n    // only do if props change\n    if (prevProps !== this.props) {\n      this.props.sweepData.map(s => this.sweeps[s.sid] = s);\n      this.getOptions().then((options) => {\n        this.setState({\n          options: options,\n        });\n      });\n    }\n  }\n\n  private async getOptions() {\n    const { currSweepId } = this.props;\n    const { sweeps } = this;\n    // add new data\n    const optionsList: OptionsObject[] = [];\n    for (const id of Object.keys(sweeps)) {\n        let dist: number | undefined;\n        if (currSweepId) {\n            const dest = sweeps[id].position;\n            dist = distance(sweeps[currSweepId].position, dest);\n        }\n        optionsList.push({ id: id, distance: dist });\n    }\n    // if (currSweepId) {\n    //     // sort ascending distance\n    //     optionsList.sort((a, b) => {\n    //       if (a.distance && b.distance)\n    //         return a.distance - b.distance;\n    //       return a.id.localeCompare(b.id);\n    //     });\n    // }\n    return optionsList;\n  }\n\n  private renderItem(o: OptionsObject) {\n    const { onChange } = this.props;\n    return (\n      <AccordionItem\n        header={o.id}\n        body={o.distance ? Math.round(o.distance) + 'm' : undefined}\n        onClick={() => onChange(o.id)}\n      />\n    );\n  }\n\n  private renderGroups() {\n    const { options } = this.state;\n    const groups = [];\n\n    const items = [];\n    for (const elt of options) {\n      items.push(this.renderItem(elt));\n    }\n\n    return (\n      <AccordionGroup\n        header={`All Sweeps`}\n        expanded={true}\n      >\n        {items}\n      </AccordionGroup>\n    );\n  }\n  \n  public render() {\n    const { options } = this.state;\n    return (\n      <div className='menu'>\n        <Accordion header={`Sweeps (${options.length})`}>\n          {this.renderGroups()}\n        </Accordion>\n      </div>\n    );\n  }\n}","import { Sweep, Vector3 } from '../mp/sdk';\nimport { distance } from './utils';\n\n/**\n * Path given by `findShortestPath` as list of sweep ids. It's a separate type\n * just in case the return type changes.\n */\nexport type SweepPath = string[];\n\n/**\n * Graph as adjacency list, with sweep ids mapping to a list of neighboring ids,\n * who each map to corresponding distances.\n */\ninterface SweepGraph {\n  [a_id: string]: AdjacencyNode;\n}\ninterface AdjacencyNode {\n  [b_id: string]: number;\n}\n\nexport interface SweepPositions {\n  [id: string]: Vector3;\n}\n\nexport default class Pathfinder {\n\n  private VERT_THRESHOLD = 0.5; // penalize sweeps vertically separated by this distance, in meters\n  private HORZ_THRESHOLD = 10.0; // penalize sweeps horizontally separated by this distance, in meters\n\n  private graph: SweepGraph = {};\n  public path: SweepPath = [];\n\n  private sweepPositions: SweepPositions = {};\n\n  constructor(sweepData: Sweep.SweepData[]) {\n    // init sweepPositions\n    sweepData.map(sweep => this.sweepPositions[sweep.sid] = sweep.position);\n    this.createGraph(sweepData);\n  }\n\n  /**\n   * Generate graph of sweep distances.\n   * @param {Sweep.SweepData[]} sweeps List of sweep data, such as `sdk.Model.getData().sweeps`\n   */\n  private createGraph(sweeps: Sweep.SweepData[]): void {\n    const graph: SweepGraph = {};\n    for (let i = 0; i < sweeps.length; i++) {\n      const sweep_a = sweeps[i];\n      const adj: AdjacencyNode = {};\n      const neighbor_sids = sweep_a.neighbors;\n      for (let j = 0; j < neighbor_sids.length; j++) {\n        const sweep_b_sid = neighbor_sids[j];\n        const d = distance(sweep_a.position, this.sweepPositions[sweep_b_sid]);\n        adj[sweep_b_sid] = d;\n      }\n      graph[sweep_a.sid] = adj;\n    }\n    this.graph = graph;\n  }\n\n  /**\n   * Heuristic function for A*. Just take Euclidean distance.\n   */\n  private heuristic(i_sid: string, j_sid: string): number {\n    const { sweepPositions } = this;\n    return distance(sweepPositions[i_sid], sweepPositions[j_sid]);\n  }\n\n  /**\n   * Additional penalty to avoid large vertical/horizontal jumps.\n   */\n  private penalty(i_sid: string, j_sid: string): number {\n    const { sweepPositions } = this;\n    return ((sweepPositions[i_sid].y - sweepPositions[j_sid].y) / this.VERT_THRESHOLD) ** 4\n      + (((sweepPositions[i_sid].x - sweepPositions[j_sid].x) ** 2 + (sweepPositions[i_sid].z - sweepPositions[j_sid].z) ** 2) / this.HORZ_THRESHOLD);\n  }\n\n  /**\n   * Find shortest path between two sweeps connected by valid movements.\n   * @param {string} a_sid SID of starting sweep.\n   * @param {string} b_sid SID of ending sweep.\n   * @returns {SweepPath} Path from `a_sid` to `b_sid`.\n   */\n  public async findShortestPath(a_sid: string, b_sid: string): Promise<SweepPath | undefined> {\n\n    const { graph } = this;\n\n    console.log(a_sid, b_sid);\n\n    // check SIDs are valid\n    if (graph[a_sid] === undefined || graph[b_sid] === undefined) {\n      console.error('Sweep SID(s) is invalid.');\n      return;\n    }\n\n    const ht: any = {}; // hash table that stores the following info for each encountered sweep:\n    ht[a_sid] = { visited: false, distance: 0, cost: 0, parent: null };\n\n    // loop A* algorithm\n    let debug_n = 0; // count number of iterations\n\n    while (true) {\n      debug_n += 1;\n      // find unvisited sweep with minimum cost = distance + heuristic\n      // TODO: optimize with priority queue\n      let min_sid;\n      const encountered_sids = Object.keys(ht);\n      for (let i = 0; i < encountered_sids.length; i++) {\n        const sid = encountered_sids[i];\n        if (!ht[sid].visited && (min_sid === undefined || ht[sid].cost < ht[min_sid].cost)) {\n          min_sid = sid;\n        }\n      }\n      if (min_sid === undefined) {\n        console.error('Could not find path; sweeps are not connected.');\n        return;\n      }\n      // check if sweep is ending point\n      if (min_sid === b_sid) {\n        break;\n      }\n      // add all neighbors of `min_sid`\n      ht[min_sid].visited = true;\n      const neighbor_sids = Object.keys(graph[min_sid]);\n      for (let i = 0; i < neighbor_sids.length; i++) {\n        const sid = neighbor_sids[i];\n        const dist = ht[min_sid].distance + graph[min_sid][sid];\n        const cost = dist + this.penalty(min_sid, sid) + this.heuristic(sid, b_sid);\n        if (sid in ht) { // if sweep has been encountered\n          if (!ht[sid].visited && (ht[sid].cost > cost)) { // if not visited and smaller cost, then update\n            ht[sid].parent = min_sid;\n            ht[sid].distance = dist;\n            ht[sid].cost = cost;\n          }\n        } else { // if sweep has not been encountered yet\n          ht[sid] = { visited: false, distance: dist, cost: cost, parent: min_sid };\n        }\n      }\n    }\n    console.log(`Pathfind iterations: ${debug_n}`);\n\n    // traverse graph back to starting point\n    let sid = b_sid;\n    const path: string[] = [sid];\n    while (ht[sid].parent !== null) {\n      sid = ht[sid].parent as string;\n      path.push(sid);\n    }\n    path.reverse();\n    return path;\n\n  }\n}","import { Color, Vector3 } from \"../../mp/sdk\";\n\ninterface PathRendererInputs {\n  visible: boolean;\n  path: Vector3[];\n  radius: number;\n  color: Color | number;\n  opacity: number;\n  heightOffset: number;\n  stepMultiplier: number;\n}\n\ninterface PathRendererOutputs {\n  objectRoot: any;\n  curve: any;\n}\n\nclass PathRenderer {\n\n  private material: any;\n\n  private inputs: PathRendererInputs = {\n    visible: false,\n    path: [], // positions on path\n    radius: 0.15,\n    color: 0x00ff00,\n    opacity: 0.5,\n    heightOffset: -1,\n    stepMultiplier: 5,\n  };\n\n  private context: any;\n\n  private outputs = {\n    curve: null,\n  } as PathRendererOutputs;\n\n  public onInit = async () => {\n\n    const THREE = this.context.three;\n\n    const { path,\n            radius,\n            heightOffset,\n            opacity,\n            color,\n            stepMultiplier } = this.inputs;\n\n    // check if path is long enough and no undefined points\n    if (path.length < 2 || !path.every(p => !!p)) return;\n    \n    const points = path.map(p => new THREE.Vector3(p.x, p.y+heightOffset, p.z));\n    const spline = new THREE.CatmullRomCurve3(points);\n\n    const extrudeSettings = {\n        steps: stepMultiplier * path.length,\n        bevelEnabled: false,\n        extrudePath: spline,\n    };\n\n    // Shape to extrude\n    const arcShape = new THREE.Shape().absarc(0, 0, radius, 0, Math.PI * 2, false);\n    \n    const extrudeGeometry = new THREE.ExtrudeGeometry( arcShape, extrudeSettings );\n    \n    this.material = new THREE.MeshBasicMaterial({\n        color: color as number,\n        transparent: true,\n        opacity: opacity,\n    });\n\n    const pathMesh = new THREE.Mesh(extrudeGeometry, this.material)\n\n    this.outputs.objectRoot = pathMesh;\n    this.outputs.curve = spline;\n  };\n\n  public onEvent = function(_type: any, _data: any) {\n  }\n\n  public onInputsUpdated = function(_previous: any) {\n  };\n\n  public onTick = function(_tickDelta: any) {\n  };\n\n  public onDestroy = () => {\n    this.material?.dispose();\n  };\n}\n\nexport const pathRendererType = 'sdk-component.pathRenderer';\nexport function PathRendererFactory() {\n  return new PathRenderer();\n}","interface CameraControllerInputs {\n  curve: any,\n  speed: number,\n  verticalOffset: number\n}\n\ninterface CameraControllerOutputs {\n  camera: any,\n}\n\nclass CameraController {\n\n  private startTime: any;\n  private length: any;\n  private up: any;\n\n  private inputs: CameraControllerInputs = {\n    curve: null,\n    speed: 1.,\n    verticalOffset: 1.,\n  };\n\n  private context: any;\n\n  private outputs = {\n    camera: null,\n  } as CameraControllerOutputs;\n\n  public onInit = async () => {\n    const THREE = this.context.three;\n    console.log(\"start\");\n\n    const camera = new THREE.PerspectiveCamera( 45, 1.333, 1, 1000 );\n    this.outputs.camera = camera;\n    \n    camera.position.copy(this.inputs.curve.getPoint(0));\n    camera.position.y += this.inputs.verticalOffset;\n    camera.updateProjectionMatrix();\n\n    this.startTime = Date.now();\n    this.length = this.inputs.curve.getLength();\n    this.up = new THREE.Vector3(0, 1, 0);\n\n  };\n\n  public onEvent = function(_type: any, _data: any) {\n  };\n\n  public onInputsUpdated = function(_previous: any) {\n  };\n\n  public onTick = async (_tickDelta: any) => {\n    const THREE = this.context.three;\n\n    const time = (Date.now() - this.startTime)/1000;\n    const tNow = this.inputs.speed * time / this.length;\n    const tFuture = this.inputs.speed * (time + 1) / this.length;\n\n    // positions\n    const currPos = this.inputs.curve.getPointAt(tNow);\n    const futurePos = this.inputs.curve.getPointAt(tFuture);\n    this.outputs.camera.position.copy(currPos);\n    this.outputs.camera.position.y += 1.;\n\n    // rotation\n    const matrix = new THREE.Matrix4().lookAt(currPos, futurePos, this.up);\n    const quaternion = new this.context.three.Quaternion().setFromRotationMatrix(matrix);\n    this.outputs.camera.quaternion.copy(quaternion);\n    this.outputs.camera.updateProjectionMatrix();\n  };\n\n  public onDestroy = function() {\n  };\n}\n\nexport const cameraControllerType = 'sdk-component.cameraController';\nexport function CameraControllerFactory() {\n  return new CameraController();\n}\n","import { MpSdk } from \"../../mp/sdk\";\nimport { PathRendererFactory, pathRendererType } from \"./PathRenderer\";\nimport { CameraControllerFactory, cameraControllerType } from \"./CameraController\";\n\n/**\n * Registers all SDK Scene components.\n * @param {MpSdk} sdk\n */\n\nexport const initComponents = async (sdk: MpSdk | any) => {\n  await Promise.all([\n    sdk.Scene.register(pathRendererType, PathRendererFactory),\n    sdk.Scene.register(cameraControllerType, CameraControllerFactory),\n  ]);\n}","import { Component } from 'react';\nimport { GetSDK } from '../mp/GetSDK';\nimport { Dictionary, MpSdk, Sweep } from '../mp/sdk';\nimport './App.scss';\nimport Frame from './Frame';\nimport Menu from './Menu';\nimport Pathfinder from './Pathfinder';\nimport { initComponents } from './sdk-components';\nimport { pathRendererType } from './sdk-components/PathRenderer';\nimport { cameraControllerType } from './sdk-components/CameraController';\nimport { sweepIdToPoint } from './utils';\n\nexport interface Sdk extends MpSdk {\n  Scene?: any;\n}\n\ninterface AppState {\n  currSweepId?: string;\n  selectedSweepId?: string;\n  sweepData: Sweep.SweepData[]; // put in state because changes should trigger rerender\n  sweepMap?: Dictionary<MpSdk.Sweep.ObservableSweepData>;\n}\n\nconst defaultUrlParams: any = {\n  m: 'opSBz3SgMg3',\n  applicationKey: 'q44m20q8yk81yi0qgixrremda',\n  title: '0',\n  qs: '1',\n  hr: '0',\n  brand: '0',\n  help: '0',\n  play: '1',\n}\n\n/**\n * This is the top level class for the app. It handles API key, model ID, and url stuff,\n * and holds references to objects/modules/components for object composition.\n * Do non-initializing SDK and UI stuff in other components/files.\n */\nexport default class App extends Component<{}, AppState> {\n\n\n  private src: string; // the url source for the sdk\n  private sdk?: Sdk;\n\n  private pathNode: any; // the node for the PathRenderer component\n  private path: any; // PathRenderer component. Needed for CameraController.\n  private pathfinder?: Pathfinder;\n\n  private flyNode: any; // the node for the CameraController component\n\n  constructor(props: any) {\n    super(props);\n    const queryString = this.handleUrlParams();\n    this.src = `${process.env.PUBLIC_URL}/bundle/showcase.html?${queryString}`;\n\n    this.state = {\n      sweepData: [],\n    };\n  }\n\n  private handleUrlParams(): string {\n    const params = new URLSearchParams(window.location.search);\n    for (const [k, v] of Object.entries(defaultUrlParams)) {\n      if (!params.has(k)) {\n        params.append(k, ''+v); // convert v to string\n      }\n    }\n    return params.toString();\n  }\n\n  public async componentDidMount() {\n    \n    this.sdk = await GetSDK('showcase', defaultUrlParams.applicationKey);\n    await initComponents(this.sdk);\n\n    const sweepData = (await this.sdk.Model.getData()).sweeps;\n    this.pathfinder = new Pathfinder(sweepData);\n    this.setState({\n      sweepData: sweepData,\n    });\n\n    this.sdk.Sweep.data.subscribe({\n      onCollectionUpdated: (collection: Dictionary<MpSdk.Sweep.ObservableSweepData>) => {\n        this.setState({\n          sweepMap: collection\n        });\n      },\n    });\n\n    this.sdk.Sweep.current.subscribe((currentSweep: any) => {\n      this.setState({\n        currSweepId: currentSweep.sid,\n      });\n    });\n  }\n\n  componentDidUpdate() {\n    this.handlePath();\n    console.log('updated');\n  }\n\n  private onOptionSelect = (id: string) => {\n    this.setState({\n      selectedSweepId: id,\n    });\n  }\n\n  private async handlePath() {\n    const { currSweepId, selectedSweepId, sweepMap } = this.state;\n    const { sdk, pathfinder } = this;\n\n    if (sdk && sweepMap && currSweepId && selectedSweepId && pathfinder) {\n      const path = await pathfinder.findShortestPath(currSweepId, selectedSweepId);\n      if (!path) return;\n      if (this.pathNode) this.pathNode.stop();\n      this.pathNode = await sdk.Scene.createNode();\n      this.path = this.pathNode.addComponent(pathRendererType, {\n        path: path.map(id => sweepIdToPoint(id, sweepMap)),\n        opacity: 0.7,\n        radius: 0.12,\n        stepMultiplier: 10,\n        color: 0x8df763,\n      });\n      this.pathNode.start();\n    }\n  }\n\n  private async startFly() {\n    const { sdk, path } = this;\n\n    if (sdk && path) {\n        this.endFly();\n        this.flyNode = await sdk.Scene.createNode();\n        const camCon = await this.flyNode.addComponent(cameraControllerType);\n        const cam = this.flyNode.addComponent('mp.camera', {\n            enabled: true,\n        });\n        camCon.bind('curve', path, 'curve');\n        cam.bind('camera', camCon, 'camera');\n        await sdk.Mode.moveTo(sdk.Mode.Mode.DOLLHOUSE, {\n          transition: sdk.Mode.TransitionType.INSTANT,\n        });\n        this.flyNode.start();\n    }\n  }\n\n  private async endFly() {\n    const { sdk, flyNode } = this;\n    if (sdk && flyNode) {\n      flyNode.stop();\n      //await sdk.Mode.moveTo(sdk.Mode.Mode.INSIDE);\n    }\n  }\n\n  public render() {\n\n    const { currSweepId, sweepData } = this.state;\n    return (\n      <div className='app'>\n        <Frame src={this.src} />\n        <div className='fly-buttons'>\n          <button onClick={() => this.startFly()}>Start Fly</button>\n          <button onClick={() => this.endFly()}>End Fly</button>\n        </div>\n        <Menu\n          currSweepId={currSweepId}\n          sweepData={sweepData}\n          onChange={this.onOptionSelect}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}