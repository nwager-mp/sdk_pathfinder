{"version":3,"sources":["mp/GetSDK.ts","app/Frame.tsx","app/utils.ts","app/Menu.tsx","app/Pathfinder.ts","app/sdk-components/PathRenderer.ts","app/sdk-components/index.ts","app/App.tsx","index.tsx"],"names":["GetSDK","elementId","applicationKey","Promise","resolve","reject","intervalId","setInterval","a","iframe","HTMLIFrameElement","document","getElementById","contentWindow","sdkWindow","MP_SDK","clearInterval","sdk","connect","Frame","className","id","this","props","src","title","allowFullScreen","frameBorder","Component","distance","p1","p2","Math","sqrt","x","y","z","sweepIdToPoint","sweepData","position","Menu","sweeps","state","optionsElements","prevProps","map","s","sid","renderOptions","then","options","setState","currSweepId","optionsList","Object","keys","dist","dest","push","o","value","round","selectedSweepId","onChange","Pathfinder","VERT_THRESHOLD","HORZ_THRESHOLD","adjList","path","sweepPositions","sweep","createGraph","i","length","sweep_a","neighbor_sids","neighbors","j","sweep_b_sid","d","i_sid","j_sid","a_sid","b_sid","console","log","undefined","error","ht","visited","cost","parent","debug_n","min_sid","encountered_sids","penalty","heuristic","PathRenderer","material","inputs","visible","radius","color","opacity","heightOffset","stepMultiplier","context","outputs","onInit","THREE","three","every","p","points","Vector3","spline","CatmullRomCurve3","extrudeSettings","steps","bevelEnabled","extrudePath","arcShape","Shape","absarc","PI","extrudeGeometry","ExtrudeGeometry","MeshBasicMaterial","transparent","pathMesh","Mesh","objectRoot","onEvent","_type","_data","onInputsUpdated","_previous","onTick","_tickDelta","onDestroy","dispose","pathRendererType","PathRendererFactory","initComponents","all","Scene","register","App","apiKey","modelId","pathNode","pathfinder","onOptionSelect","e","currentTarget","queryString","window","location","href","split","Sweep","data","subscribe","onCollectionUpdated","collection","sweepMap","Model","getData","current","currentSweep","handlePath","findShortestPath","stop","createNode","addComponent","start","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.94f447d5.chunk.js","sourcesContent":["import { MpSdk, ShowcaseEmbedWindow } from './sdk';\n\nconst SDK_VERSION = '3.2';\n\n/**\n * Gets a reference to the SDK. Use this if you want to do SDK stuff.\n * @param {string | HTMLIFrameElement} elementId ID of the iframe or the iframe element itself\n * @param {string} applicationKey Your API key \n * @returns Promise of MpSdk reference\n */\nexport const GetSDK = function(elementId: string | HTMLIFrameElement, applicationKey: string): Promise<MpSdk> {\n  return new Promise(function(resolve, reject) {\n    const checkIframe = async function() {\n      let iframe = null;\n      if (elementId instanceof HTMLIFrameElement) {\n        iframe = elementId as HTMLIFrameElement;\n      }\n      else {\n        iframe = document.getElementById(elementId) as HTMLIFrameElement;\n      }\n\n      if (iframe) {\n        // sometimes this is undefined for some reason, so check for it\n        const sdkWindow = (await iframe.contentWindow as ShowcaseEmbedWindow).MP_SDK;\n        if (sdkWindow) {\n          clearInterval(intervalId);\n          const sdk = sdkWindow.connect(iframe, applicationKey, SDK_VERSION);\n          resolve(sdk);\n        }\n      }\n    };\n    const intervalId = setInterval(checkIframe, 100);\n  });\n}\n","import React, { Component } from 'react';\nimport './Frame.css';\n\ninterface Props {\n  src: string;\n  id?: string;\n}\n\n/**\n * This component houses the actual Matterport IFrame element. Doesn't do anything else.\n */\nexport default class Frame extends Component<Props, {}> {\n  render() {\n    return (\n      <div className='frame'>\n        <iframe\n          id={this.props.id || 'showcase'}\n          className='frame'\n          src={this.props.src}\n          title={'showcase'}\n          allowFullScreen={true}\n          frameBorder='0'\n        >\n        </iframe>\n      </div>\n    );\n  }\n}\n","import { Dictionary, MpSdk, Vector3 } from \"../mp/sdk\";\n\n/**\n * This module is for general helper interfaces, types, and methods.\n */\n\n/**\n * Euclidean distance between two points.\n * @param {Vector3} p1 \n * @param {Vector3} p2 \n * @returns {number}\n */\nexport function distance(p1: Vector3, p2: Vector3): number {\n  return Math.sqrt((p1.x - p2.x)**2 + (p1.y - p2.y)**2 + (p1.z - p2.z)**2);\n}\n\nexport function sweepIdToPoint(id: string, sweepData: Dictionary<MpSdk.Sweep.ObservableSweepData>): Vector3 {\n  return sweepData[id].position;\n}\n\nexport {};","import { Component } from \"react\";\nimport { Dictionary, Sweep } from \"../mp/sdk\";\nimport { distance } from \"./utils\";\n\ninterface MenuProps {\n  currSweepId?: string;\n  selectedSweepId?: string;\n  sweepData: Sweep.SweepData[];\n  onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n}\n\ninterface MenuState {\n  optionsElements: JSX.Element[];\n}\n\ninterface OptionsObject {\n  id: string;\n  distance?: number;\n}\n\n/**\n * Component for UI elements like sweep selector, location info, etc.\n */\nexport default class Menu extends Component<MenuProps, MenuState> {\n\n  private sweeps: Dictionary<Sweep.SweepData> = {}; // more convenient form of sweep data\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      optionsElements: [],\n    };\n  }\n\n  public componentDidUpdate(prevProps: MenuProps) {\n    // only do if props change\n    if (prevProps !== this.props) {\n      this.props.sweepData.map(s => this.sweeps[s.sid] = s);\n      this.renderOptions().then((options) => {\n        this.setState({\n          optionsElements: options,\n        });\n      });\n    }\n  }\n\n  private async renderOptions() {\n    const { currSweepId } = this.props;\n    const { sweeps } = this;\n    // add new data\n    const optionsList: OptionsObject[] = [];\n    for (const id of Object.keys(sweeps)) {\n        let dist: number | undefined;\n        if (currSweepId) {\n            const dest = sweeps[id].position;\n            dist = distance(sweeps[currSweepId].position, dest);\n        }\n        optionsList.push({ id: id, distance: dist });\n    }\n    // if (currSweepId) {\n    //     // sort ascending distance\n    //     optionsList.sort((a, b) => {\n    //       if (a.distance && b.distance)\n    //         return a.distance - b.distance;\n    //       return a.id.localeCompare(b.id);\n    //     });\n    // }\n    return optionsList.map(o => {\n      return (\n        <option key={o.id} value={o.id}>\n          {o.id + (o.distance ? ` (${Math.round(o.distance)}m)` : '')}\n        </option>\n      );\n    });\n  }\n  \n  public render() {\n    const { selectedSweepId, onChange } = this.props;\n    const { optionsElements } = this.state;\n    return (\n      <div className=\"menu\">\n        <select onChange={onChange} value={selectedSweepId}>\n          <option value=''>--</option>\n          {optionsElements}\n        </select>\n      </div>\n    );\n  }\n}","import { Sweep, Vector3 } from '../mp/sdk';\nimport { distance } from './utils';\n\n/**\n * Path given by `findShortestPath()`. List of sweep ids in reverse order. It's a separate type\n * just in case the return type changes.\n */\nexport type SweepPath = string[];\n\n/**\n * Graph given by `createGraph`. Adjacency list, with sweep ids mapping to a list of neighboring ids,\n * who each map to corresponding distances.\n */\ninterface SweepGraph {\n  [a_id: string]: AdjacencyNode;\n}\ninterface AdjacencyNode {\n  [b_id: string]: number;\n}\n\nexport interface SweepPositions {\n  [id: string]: Vector3;\n}\n\nexport default class Pathfinder {\n\n  private VERT_THRESHOLD = 1.; // penalize sweeps vertically separated by this distance, in meters\n  private HORZ_THRESHOLD = 10.0; // penalize sweeps horizontally separated by this distance, in meters\n\n  private adjList: SweepGraph = {};\n  public path: SweepPath = [];\n\n  private sweepPositions: SweepPositions = {};\n\n  constructor(sweepData: Sweep.SweepData[]) {\n    // init sweepPositions\n    sweepData.map(sweep => this.sweepPositions[sweep.sid] = sweep.position);\n    this.createGraph(sweepData);\n  }\n\n  /**\n   * Generate graph of sweep distances.\n   * @param {*} sweeps List of sweeps, as returned by `sdk.Model.getData().sweeps`\n   * @returns The distance between two neighboring sweeps is obtained by `adjList[sweep_a_sid][sweep_b_sid]`\n   */\n  private createGraph(sweeps: Sweep.SweepData[]): void {\n    const adjList: SweepGraph = {};\n    for (let i=0; i<sweeps.length; i++) {\n      const sweep_a = sweeps[i];\n      adjList[sweep_a.sid] = {};\n      const neighbor_sids = sweep_a.neighbors;\n      for (let j=0; j<neighbor_sids.length; j++) {\n        const sweep_b_sid = neighbor_sids[j];\n        const d = distance(sweep_a.position, this.sweepPositions[sweep_b_sid]);\n        adjList[sweep_a.sid][sweep_b_sid] = d;\n      }\n    }\n    this.adjList = adjList;\n  }\n      \n  private heuristic(i_sid: string, j_sid: string): number {\n    const sweepPositions = this.sweepPositions;\n    // Heuristic function for A*. Just take Euclidean distance.\n    return distance(sweepPositions[i_sid], sweepPositions[j_sid]);\n  }\n\n  private penalty(i_sid: string, j_sid: string): number {\n    const sweepPositions = this.sweepPositions;\n    // Additional penalty to avoid large vertical/horizontal jumps, if possible\n    return ((sweepPositions[i_sid].y - sweepPositions[j_sid].y)/this.VERT_THRESHOLD)**4 \n        + (((sweepPositions[i_sid].x - sweepPositions[j_sid].x)**2 + (sweepPositions[i_sid].z - sweepPositions[j_sid].z)**2)/this.HORZ_THRESHOLD)**2;\n  }\n\n  /**\n   * Find shortest path between two sweeps, connected by valid movements.\n   * @param {string} a_sid SID of starting sweep\n   * @param {string} b_sid SID of ending sweep\n   * @returns Path represented by list of sweep SIDs (string) in reverse order, i.e. [b_sid, ..., a_sid]\n   */\n  public async findShortestPath(a_sid: string, b_sid: string): Promise<SweepPath | undefined> {\n    const { adjList } = this;\n\n    console.log(a_sid, b_sid);\n\n    // check SIDs are valid\n    if (adjList[a_sid] === undefined || adjList[b_sid] === undefined) {\n        console.error('Sweep SID(s) is invalid.');\n        return;\n    }\n\n    const ht: any = {}; // hash table that stores the following info for each encountered sweep:\n    ht[a_sid] = {visited: false, distance: 0, cost: 0, parent: null};\n\n    // loop A* algorithm\n    let debug_n = 0; // count number of iterations\n\n    while (true) {\n      debug_n += 1;\n      // find unvisited sweep with minimum cost = distance  + heuristic\n      // TODO: optimize with priority queue\n      let min_sid;\n      const encountered_sids = Object.keys(ht);\n      for (let i=0; i<encountered_sids.length; i++) {\n        const sid = encountered_sids[i];\n        if (!ht[sid].visited && (min_sid === undefined || ht[sid].cost < ht[min_sid].cost)) {\n            min_sid = sid;\n        }\n      }\n      if (min_sid === undefined) {\n        console.error('Could not find path; sweeps are not connected.');\n        return;\n      }\n      // check if sweep is ending point\n      if (min_sid === b_sid) {\n        break;\n      }\n      // add all neighbors of `min_sid`\n      ht[min_sid].visited = true;\n      const neighbor_sids = Object.keys(adjList[min_sid]);\n      for (let i=0; i<neighbor_sids.length; i++) {\n        const sid = neighbor_sids[i];\n        const dist = ht[min_sid].distance + adjList[min_sid][sid];\n        const cost = dist + this.penalty(min_sid, sid) + this.heuristic(sid, b_sid);\n        if (sid in ht) { // if sweep has been encountered\n          if (!ht[sid].visited && (ht[sid].cost > cost)) { // if not visited and smaller cost, then update\n            ht[sid].parent = min_sid;\n            ht[sid].distance = dist;\n            ht[sid].cost = cost;\n          }\n        } else { // if sweep has not been encountered yet\n          ht[sid] = {visited: false, distance: dist, cost: cost, parent: min_sid};\n        }\n      }\n    }\n    // traverse graph back to starting point\n    let sid = b_sid;\n    const path: string[] = [sid];\n    while (ht[sid].parent !== null) {\n        sid = ht[sid].parent as string;\n        path.push(sid);\n    }\n    console.log('Pathfind iterations: %d', debug_n);\n    return path;\n  }\n}","import { Color, Vector3 } from \"../../mp/sdk\";\n\ninterface PathRendererInputs {\n  visible: boolean;\n  path: Vector3[];\n  radius: number;\n  color: Color | number;\n  opacity: number;\n  heightOffset: number;\n  stepMultiplier: number;\n}\n\nclass PathRenderer {\n\n  private material: any;\n\n  private inputs: PathRendererInputs = {\n    visible: false,\n    path: [], // positions on path\n    radius: 0.15,\n    color: 0x00ff00,\n    opacity: 0.5,\n    heightOffset: -1,\n    stepMultiplier: 5,\n  };\n\n  private context: any;\n\n  private outputs: any;\n\n  public onInit = async () => {\n\n    const THREE = this.context.three;\n\n    const { path,\n            radius,\n            heightOffset,\n            opacity,\n            color,\n            stepMultiplier } = this.inputs;\n\n    // check if path is long enough and no undefined points\n    if (path.length < 2 || !path.every(p => !!p)) return;\n    \n    const points = path.map(p => new THREE.Vector3(p.x, p.y+heightOffset, p.z));\n    const spline = new THREE.CatmullRomCurve3(points);\n\n    const extrudeSettings = {\n        steps: stepMultiplier * path.length,\n        bevelEnabled: false,\n        extrudePath: spline,\n    };\n\n    // Shape to extrude\n    const arcShape = new THREE.Shape().absarc(0, 0, radius, 0, Math.PI * 2, false);\n    \n    const extrudeGeometry = new THREE.ExtrudeGeometry( arcShape, extrudeSettings );\n    \n    this.material = new THREE.MeshBasicMaterial({\n        color: color as number,\n        transparent: true,\n        opacity: opacity,\n    });\n\n    const pathMesh = new THREE.Mesh(extrudeGeometry, this.material)\n\n    this.outputs.objectRoot = pathMesh;\n  };\n\n  public onEvent = function(_type: any, _data: any) {\n  }\n\n  public onInputsUpdated = function(_previous: any) {\n  };\n\n  public onTick = function(_tickDelta: any) {\n  };\n\n  public onDestroy = () => {\n      this.material?.dispose();\n  };\n}\n\nexport const pathRendererType = 'sdk-component.pathRenderer';\nexport function PathRendererFactory() {\n  return new PathRenderer();\n}","import { MpSdk } from \"../../mp/sdk\";\nimport { PathRendererFactory, pathRendererType } from \"./PathRenderer\";\n\n/**\n * Registers all SDK Scene components.\n * @param {MpSdk} sdk\n */\n\nexport const initComponents = async (sdk: MpSdk | any) => {\n  await Promise.all([\n    sdk.Scene.register(pathRendererType, PathRendererFactory),\n  ]);\n}","import { Component } from 'react';\nimport { GetSDK } from '../mp/GetSDK';\nimport { Dictionary, MpSdk, Sweep } from '../mp/sdk';\nimport './App.css';\nimport Frame from './Frame';\nimport Menu from './Menu';\nimport Pathfinder from './Pathfinder';\nimport { initComponents } from './sdk-components';\nimport { pathRendererType } from './sdk-components/PathRenderer';\nimport { sweepIdToPoint } from './utils';\n\nexport interface Sdk extends MpSdk {\n  Scene?: any;\n}\n\ninterface AppState {\n  currSweepId?: string;\n  selectedSweepId?: string;\n  sweepData: Sweep.SweepData[]; // put in state because changes should trigger rerender\n  sweepMap?: Dictionary<MpSdk.Sweep.ObservableSweepData>;\n}\n\n/**\n * This is the top level class for the app. It handles API key, model ID, and url stuff,\n * and holds references to objects/modules/components for object composition.\n * Do non-initializing SDK and UI stuff in other components/files.\n */\nexport default class App extends Component<{}, AppState> {\n  private apiKey = 'e0iyprwgd7e7mckrhei7bwzza';\n  private modelId = 'opSBz3SgMg3';\n\n  private src: string; // the url source for the sdk\n  private sdk?: Sdk;\n\n  private pathNode: any; // the node for the PathRenderer component\n  private pathfinder?: Pathfinder;\n\n  constructor(props: any) {\n    super(props);\n    // let queryString = `m=${this.modelId}&applicationKey=${this.apiKey}`;\n    // queryString += '&title=0&qs=1&hr=0&brand=0&help=0&play=1';\n    let queryString = window.location.href.split('?')[1]; \n    this.src = `/bundle/showcase.html?${queryString}`;\n\n    this.state = {\n      sweepData: [],\n    };\n  }\n\n  public async componentDidMount() {\n    this.sdk = await GetSDK('showcase', this.apiKey);\n    await initComponents(this.sdk);\n    this.sdk.Sweep.data.subscribe({\n      onCollectionUpdated: (collection: Dictionary<MpSdk.Sweep.ObservableSweepData>) => {\n        this.setState({\n          sweepMap: collection\n        });\n      },\n    });\n    const sweepData = (await this.sdk.Model.getData()).sweeps;\n    this.pathfinder = new Pathfinder(sweepData);\n\n    this.setState({\n      sweepData: sweepData,\n    });\n\n    this.sdk.Sweep.current.subscribe((currentSweep: any) => {\n      this.setState({\n        currSweepId: currentSweep.sid,\n      });\n    });\n  }\n\n  componentDidUpdate() {\n    this.handlePath();\n  }\n\n  private onOptionSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      selectedSweepId: e.currentTarget.value,\n    });\n  }\n\n  private async handlePath() {\n    const { currSweepId, selectedSweepId, sweepMap } = this.state;\n    const { sdk, pathfinder } = this;\n\n    if (sdk && sweepMap && currSweepId && selectedSweepId && pathfinder) {\n      const path = await pathfinder.findShortestPath(currSweepId, selectedSweepId);\n      if (!path) return;\n      if (this.pathNode) this.pathNode.stop();\n      this.pathNode = await sdk.Scene.createNode();\n      this.pathNode.addComponent(pathRendererType, {\n        path: path.map(id => sweepIdToPoint(id, sweepMap)),\n        opacity: 0.7,\n        radius: 0.12,\n        stepMultiplier: 10,\n        color: 0x8df763,\n      });\n      this.pathNode.start();\n    }\n  }\n\n  public render() {\n\n    const { currSweepId, sweepData } = this.state;\n    return (\n      <div className='app'>\n        <Frame src={this.src} />\n        <Menu\n          currSweepId={currSweepId}\n          sweepData={sweepData}\n          onChange={this.onOptionSelect}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}